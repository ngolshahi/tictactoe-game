{"ast":null,"code":"export function calculateWinner(squares, size = 3) {\n  // Generate all possible winning combinations for any board size\n  const lines = [];\n\n  // Rows\n  for (let i = 0; i < size; i++) {\n    const row = [];\n    for (let j = 0; j < size; j++) {\n      row.push(i * size + j);\n    }\n    lines.push(row);\n  }\n\n  // Columns\n  for (let i = 0; i < size; i++) {\n    const col = [];\n    for (let j = 0; j < size; j++) {\n      col.push(j * size + i);\n    }\n    lines.push(col);\n  }\n\n  // Diagonals\n  const diag1 = [];\n  const diag2 = [];\n  for (let i = 0; i < size; i++) {\n    diag1.push(i * size + i);\n    diag2.push(i * size + (size - 1 - i));\n  }\n  lines.push(diag1);\n  lines.push(diag2);\n\n  // Check for winner\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i];\n    const firstSquare = squares[line[0]];\n    if (!firstSquare) continue;\n    let isWinning = true;\n    for (let j = 1; j < line.length; j++) {\n      if (squares[line[j]] !== firstSquare) {\n        isWinning = false;\n        break;\n      }\n    }\n    if (isWinning) {\n      return firstSquare;\n    }\n  }\n  return null;\n}","map":{"version":3,"names":["calculateWinner","squares","size","lines","i","row","j","push","col","diag1","diag2","length","line","firstSquare","isWinning"],"sources":["/Users/nimagolshahi/Downloads/tictactoe-game/src/gameUtils.js"],"sourcesContent":["export function calculateWinner(squares, size = 3) {\n    // Generate all possible winning combinations for any board size\n    const lines = [];\n    \n    // Rows\n    for (let i = 0; i < size; i++) {\n      const row = [];\n      for (let j = 0; j < size; j++) {\n        row.push(i * size + j);\n      }\n      lines.push(row);\n    }\n    \n    // Columns\n    for (let i = 0; i < size; i++) {\n      const col = [];\n      for (let j = 0; j < size; j++) {\n        col.push(j * size + i);\n      }\n      lines.push(col);\n    }\n    \n    // Diagonals\n    const diag1 = [];\n    const diag2 = [];\n    for (let i = 0; i < size; i++) {\n      diag1.push(i * size + i);\n      diag2.push(i * size + (size - 1 - i));\n    }\n    lines.push(diag1);\n    lines.push(diag2);\n    \n    // Check for winner\n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i];\n      const firstSquare = squares[line[0]];\n      if (!firstSquare) continue;\n      \n      let isWinning = true;\n      for (let j = 1; j < line.length; j++) {\n        if (squares[line[j]] !== firstSquare) {\n          isWinning = false;\n          break;\n        }\n      }\n      \n      if (isWinning) {\n        return firstSquare;\n      }\n    }\n    \n    return null;\n  }"],"mappings":"AAAA,OAAO,SAASA,eAAeA,CAACC,OAAO,EAAEC,IAAI,GAAG,CAAC,EAAE;EAC/C;EACA,MAAMC,KAAK,GAAG,EAAE;;EAEhB;EACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,EAAEE,CAAC,EAAE,EAAE;IAC7B,MAAMC,GAAG,GAAG,EAAE;IACd,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,IAAI,EAAEI,CAAC,EAAE,EAAE;MAC7BD,GAAG,CAACE,IAAI,CAACH,CAAC,GAAGF,IAAI,GAAGI,CAAC,CAAC;IACxB;IACAH,KAAK,CAACI,IAAI,CAACF,GAAG,CAAC;EACjB;;EAEA;EACA,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,EAAEE,CAAC,EAAE,EAAE;IAC7B,MAAMI,GAAG,GAAG,EAAE;IACd,KAAK,IAAIF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,IAAI,EAAEI,CAAC,EAAE,EAAE;MAC7BE,GAAG,CAACD,IAAI,CAACD,CAAC,GAAGJ,IAAI,GAAGE,CAAC,CAAC;IACxB;IACAD,KAAK,CAACI,IAAI,CAACC,GAAG,CAAC;EACjB;;EAEA;EACA,MAAMC,KAAK,GAAG,EAAE;EAChB,MAAMC,KAAK,GAAG,EAAE;EAChB,KAAK,IAAIN,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,EAAEE,CAAC,EAAE,EAAE;IAC7BK,KAAK,CAACF,IAAI,CAACH,CAAC,GAAGF,IAAI,GAAGE,CAAC,CAAC;IACxBM,KAAK,CAACH,IAAI,CAACH,CAAC,GAAGF,IAAI,IAAIA,IAAI,GAAG,CAAC,GAAGE,CAAC,CAAC,CAAC;EACvC;EACAD,KAAK,CAACI,IAAI,CAACE,KAAK,CAAC;EACjBN,KAAK,CAACI,IAAI,CAACG,KAAK,CAAC;;EAEjB;EACA,KAAK,IAAIN,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,KAAK,CAACQ,MAAM,EAAEP,CAAC,EAAE,EAAE;IACrC,MAAMQ,IAAI,GAAGT,KAAK,CAACC,CAAC,CAAC;IACrB,MAAMS,WAAW,GAAGZ,OAAO,CAACW,IAAI,CAAC,CAAC,CAAC,CAAC;IACpC,IAAI,CAACC,WAAW,EAAE;IAElB,IAAIC,SAAS,GAAG,IAAI;IACpB,KAAK,IAAIR,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGM,IAAI,CAACD,MAAM,EAAEL,CAAC,EAAE,EAAE;MACpC,IAAIL,OAAO,CAACW,IAAI,CAACN,CAAC,CAAC,CAAC,KAAKO,WAAW,EAAE;QACpCC,SAAS,GAAG,KAAK;QACjB;MACF;IACF;IAEA,IAAIA,SAAS,EAAE;MACb,OAAOD,WAAW;IACpB;EACF;EAEA,OAAO,IAAI;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}